{"version":3,"sources":["../src/internal/multi-part.ts","../src/internal/s3-error-parser.ts"],"sourcesContent":["import { generateUploadThingURL, UploadThingError } from \"@uploadthing/shared\";\nimport type { ContentDisposition, FetchEsque } from \"@uploadthing/shared\";\n\nimport { maybeParseResponseXML } from \"./s3-error-parser\";\n\n/**\n * Used by server uploads where progress is not needed.\n * Uses normal fetch API.\n */\nexport async function uploadPart(\n  opts: {\n    fetch: FetchEsque;\n    url: string;\n    key: string;\n    chunk: Blob;\n    contentType: string;\n    contentDisposition: ContentDisposition;\n    fileName: string;\n    maxRetries: number;\n    utRequestHeaders: Record<string, string>;\n  },\n  retryCount = 0,\n) {\n  const s3Res = await opts.fetch(opts.url, {\n    method: \"PUT\",\n    body: opts.chunk,\n    headers: {\n      \"Content-Type\": opts.contentType,\n      \"Content-Disposition\": [\n        opts.contentDisposition,\n        `filename=\"${opts.fileName}\"`,\n        `filename*=UTF-8''${opts.fileName}`,\n      ].join(\"; \"),\n    },\n  });\n\n  if (s3Res.ok) {\n    const etag = s3Res.headers.get(\"Etag\");\n    if (!etag) {\n      throw new UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Missing Etag header from uploaded part\",\n      });\n    }\n    return etag.replace(/\"/g, \"\");\n  }\n\n  if (retryCount < opts.maxRetries) {\n    // Retry after exponential backoff\n    const delay = 2 ** retryCount * 1000;\n    await new Promise((r) => setTimeout(r, delay));\n    return uploadPart(opts, retryCount++);\n  }\n\n  // Max retries exceeded, tell UT server that upload failed\n  await opts.fetch(generateUploadThingURL(\"/api/failureCallback\"), {\n    method: \"POST\",\n    body: JSON.stringify({\n      fileKey: opts.key,\n    }),\n    headers: opts.utRequestHeaders,\n  });\n\n  const text = await s3Res.text();\n  const parsed = maybeParseResponseXML(text);\n  if (parsed?.message) {\n    throw new UploadThingError({\n      code: \"UPLOAD_FAILED\",\n      message: parsed.message,\n    });\n  }\n  throw new UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"Failed to upload file to storage provider\",\n    cause: s3Res,\n  });\n}\n\n/**\n * Used by client uploads where progress is needed.\n * Uses XMLHttpRequest.\n */\nexport async function uploadPartWithProgress(\n  opts: {\n    url: string;\n    chunk: Blob;\n    fileType: string;\n    fileName: string;\n    contentDisposition: ContentDisposition;\n    maxRetries: number;\n    onProgress: (progressDelta: number) => void;\n  },\n  retryCount = 0,\n) {\n  return new Promise<string>((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open(\"PUT\", opts.url, true);\n    xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n    xhr.setRequestHeader(\n      \"Content-Disposition\",\n      [\n        opts.contentDisposition,\n        `filename=\"${opts.fileName}\"`,\n        `filename*=UTF-8''${opts.fileName}`,\n      ].join(\"; \"),\n    );\n\n    xhr.onload = async () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        const etag = xhr.getResponseHeader(\"Etag\");\n        etag ? resolve(etag) : reject(\"NO ETAG\");\n      } else if (retryCount < opts.maxRetries) {\n        // Add a delay before retrying (exponential backoff can be used)\n        const delay = Math.pow(2, retryCount) * 1000;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1); // Retry the request\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n\n    let lastProgress = 0;\n\n    xhr.onerror = async () => {\n      lastProgress = 0;\n      if (retryCount < opts.maxRetries) {\n        // Add a delay before retrying (exponential backoff can be used)\n        const delay = Math.pow(2, retryCount) * 100;\n        await new Promise((res) => setTimeout(res, delay));\n        await uploadPartWithProgress(opts, retryCount + 1); // Retry the request\n      } else {\n        reject(\"Max retries exceeded\");\n      }\n    };\n\n    xhr.upload.onprogress = (e) => {\n      const delta = e.loaded - lastProgress;\n      lastProgress += delta;\n      opts.onProgress(delta);\n    };\n\n    xhr.send(opts.chunk);\n  });\n}\n","import type { UploadThingError } from \"@uploadthing/shared\";\n\nexport const maybeParseResponseXML = (maybeXml: string) => {\n  const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n  const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n\n  const code = codeMatch?.[1];\n  const message = messageMatch?.[1];\n\n  if (!code || !message) return null;\n\n  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };\n};\n\n/**\n * Map S3 error codes to UploadThing error codes\n *\n * This is a subset of the S3 error codes, based on what seemed most likely to\n * occur in uploadthing. For a full list of S3 error codes, see:\n * https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html\n */\nconst DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nconst s3CodeToUploadThingCode: Record<string, UploadThingError[\"code\"]> = {\n  AccessDenied: \"FORBIDDEN\", // 403 Forbidden\n  EntityTooSmall: \"TOO_SMALL\", // 400 Bad Request\n  EntityTooLarge: \"TOO_LARGE\", // 400 Bad Request\n  ExpiredToken: \"FORBIDDEN\", // 400 Bad Request\n  IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\", // 400 Bad Request\n  InternalError: \"INTERNAL_SERVER_ERROR\", // 500 Internal Server Error\n  KeyTooLongError: \"KEY_TOO_LONG\", // 400 Bad Request\n  MaxMessageLengthExceeded: \"TOO_LARGE\", // 400 Bad Request\n};\n"],"mappings":"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","names":[]}