"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/h3.ts
var h3_exports = {};
__export(h3_exports, {
  createH3EventHandler: () => createH3EventHandler,
  createUploadthing: () => createUploadthing
});
module.exports = __toCommonJS(h3_exports);
var import_events = __toESM(require("events"));

// ../../node_modules/.pnpm/destr@2.0.1/node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d[\d.]{0,14}\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  const _value = value.trim();
  if (value[0] === '"' && value[value.length - 1] === '"') {
    return _value.slice(1, -1);
  }
  if (_value.length <= 9) {
    const _lval = _value.toLowerCase();
    if (_lval === "true") {
      return true;
    }
    if (_lval === "false") {
      return false;
    }
    if (_lval === "undefined") {
      return void 0;
    }
    if (_lval === "null") {
      return null;
    }
    if (_lval === "nan") {
      return Number.NaN;
    }
    if (_lval === "infinity") {
      return Number.POSITIVE_INFINITY;
    }
    if (_lval === "-infinity") {
      return Number.NEGATIVE_INFINITY;
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// ../../node_modules/.pnpm/defu@6.1.2/node_modules/defu/dist/defu.mjs
function isObject(value) {
  return value !== null && typeof value === "object";
}
function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isObject(defaults)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (merger && merger(object, key, value, namespace)) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object[key])) {
      object[key] = [...value, ...object[key]];
    } else if (isObject(value) && isObject(object[key])) {
      object[key] = _defu(
        value,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object[key] = value;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
var defu = createDefu();
var defuFn = createDefu((object, key, currentValue) => {
  if (typeof object[key] !== "undefined" && typeof currentValue === "function") {
    object[key] = currentValue(object[key]);
    return true;
  }
});
var defuArrayFn = createDefu((object, key, currentValue) => {
  if (Array.isArray(object[key]) && typeof currentValue === "function") {
    object[key] = currentValue(object[key]);
    return true;
  }
});

// ../../node_modules/.pnpm/h3@1.8.1/node_modules/h3/dist/index.mjs
function hasProp(obj, prop) {
  try {
    return prop in obj;
  } catch {
    return false;
  }
}
var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var H3Error = class extends Error {
  constructor(message, opts = {}) {
    super(message, opts);
    __publicField$1(this, "statusCode", 500);
    __publicField$1(this, "fatal", false);
    __publicField$1(this, "unhandled", false);
    __publicField$1(this, "statusMessage");
    __publicField$1(this, "data");
    __publicField$1(this, "cause");
    if (opts.cause && !this.cause) {
      this.cause = opts.cause;
    }
  }
  toJSON() {
    const obj = {
      message: this.message,
      statusCode: sanitizeStatusCode(this.statusCode, 500)
    };
    if (this.statusMessage) {
      obj.statusMessage = sanitizeStatusMessage(this.statusMessage);
    }
    if (this.data !== void 0) {
      obj.data = this.data;
    }
    return obj;
  }
};
__publicField$1(H3Error, "__h3_error__", true);
function createError(input) {
  if (typeof input === "string") {
    return new H3Error(input);
  }
  if (isError(input)) {
    return input;
  }
  const err = new H3Error(input.message ?? input.statusMessage ?? "", {
    cause: input.cause || input
  });
  if (hasProp(input, "stack")) {
    try {
      Object.defineProperty(err, "stack", {
        get() {
          return input.stack;
        }
      });
    } catch {
      try {
        err.stack = input.stack;
      } catch {
      }
    }
  }
  if (input.data) {
    err.data = input.data;
  }
  if (input.statusCode) {
    err.statusCode = sanitizeStatusCode(input.statusCode, err.statusCode);
  } else if (input.status) {
    err.statusCode = sanitizeStatusCode(input.status, err.statusCode);
  }
  if (input.statusMessage) {
    err.statusMessage = input.statusMessage;
  } else if (input.statusText) {
    err.statusMessage = input.statusText;
  }
  if (err.statusMessage) {
    const originalMessage = err.statusMessage;
    const sanitizedMessage = sanitizeStatusMessage(err.statusMessage);
    if (sanitizedMessage !== originalMessage) {
      console.warn(
        "[h3] Please prefer using `message` for longer error messages instead of `statusMessage`. In the future, `statusMessage` will be sanitized by default."
      );
    }
  }
  if (input.fatal !== void 0) {
    err.fatal = input.fatal;
  }
  if (input.unhandled !== void 0) {
    err.unhandled = input.unhandled;
  }
  return err;
}
function isError(input) {
  var _a;
  return ((_a = input == null ? void 0 : input.constructor) == null ? void 0 : _a.__h3_error__) === true;
}
function isMethod(event, expected, allowHead) {
  if (allowHead && event.method === "HEAD") {
    return true;
  }
  if (typeof expected === "string") {
    if (event.method === expected) {
      return true;
    }
  } else if (expected.includes(event.method)) {
    return true;
  }
  return false;
}
function assertMethod(event, expected, allowHead) {
  if (!isMethod(event, expected, allowHead)) {
    throw createError({
      statusCode: 405,
      statusMessage: "HTTP method is not allowed."
    });
  }
}
function getRequestHeaders(event) {
  const _headers = {};
  for (const key in event.node.req.headers) {
    const val = event.node.req.headers[key];
    _headers[key] = Array.isArray(val) ? val.filter(Boolean).join(", ") : val;
  }
  return _headers;
}
function getRequestHost(event, opts = {}) {
  if (opts.xForwardedHost) {
    const xForwardedHost = event.node.req.headers["x-forwarded-host"];
    if (xForwardedHost) {
      return xForwardedHost;
    }
  }
  return event.node.req.headers.host || "localhost";
}
function getRequestProtocol(event, opts = {}) {
  if (opts.xForwardedProto !== false && event.node.req.headers["x-forwarded-proto"] === "https") {
    return "https";
  }
  return event.node.req.connection.encrypted ? "https" : "http";
}
function getRequestURL(event, opts = {}) {
  const host = getRequestHost(event, opts);
  const protocol = getRequestProtocol(event);
  const path = (event.node.req.originalUrl || event.path).replace(
    /^[/\\]+/g,
    "/"
  );
  return new URL(path, `${protocol}://${host}`);
}
var RawBodySymbol = Symbol.for("h3RawBody");
var ParsedBodySymbol = Symbol.for("h3ParsedBody");
var PayloadMethods$1 = ["PATCH", "POST", "PUT", "DELETE"];
function readRawBody(event, encoding = "utf8") {
  var _a, _b;
  assertMethod(event, PayloadMethods$1);
  const _rawBody = event._requestBody || ((_b = (_a = event.web) == null ? void 0 : _a.request) == null ? void 0 : _b.body) || event.node.req[RawBodySymbol] || event.node.req.body;
  if (_rawBody) {
    const promise2 = Promise.resolve(_rawBody).then((_resolved) => {
      if (Buffer.isBuffer(_resolved)) {
        return _resolved;
      }
      if (typeof _resolved.pipeTo === "function") {
        return new Promise((resolve, reject) => {
          const chunks = [];
          _resolved.pipeTo(
            new WritableStream({
              write(chunk) {
                chunks.push(chunk);
              },
              close() {
                resolve(Buffer.concat(chunks));
              },
              abort(reason) {
                reject(reason);
              }
            })
          ).catch(reject);
        });
      } else if (typeof _resolved.pipe === "function") {
        return new Promise((resolve, reject) => {
          const chunks = [];
          _resolved.on("data", (chunk) => {
            chunks.push(chunk);
          }).on("end", () => {
            resolve(Buffer.concat(chunks));
          }).on("error", reject);
        });
      }
      if (_resolved.constructor === Object) {
        return Buffer.from(JSON.stringify(_resolved));
      }
      return Buffer.from(_resolved);
    });
    return encoding ? promise2.then((buff) => buff.toString(encoding)) : promise2;
  }
  if (!Number.parseInt(event.node.req.headers["content-length"] || "")) {
    return Promise.resolve(void 0);
  }
  const promise = event.node.req[RawBodySymbol] = new Promise(
    (resolve, reject) => {
      const bodyData = [];
      event.node.req.on("error", (err) => {
        reject(err);
      }).on("data", (chunk) => {
        bodyData.push(chunk);
      }).on("end", () => {
        resolve(Buffer.concat(bodyData));
      });
    }
  );
  const result = encoding ? promise.then((buff) => buff.toString(encoding)) : promise;
  return result;
}
async function readBody(event, options = {}) {
  const request = event.node.req;
  if (hasProp(request, ParsedBodySymbol)) {
    return request[ParsedBodySymbol];
  }
  const contentType = request.headers["content-type"] || "";
  const body = await readRawBody(event);
  let parsed;
  if (contentType === "application/json") {
    parsed = _parseJSON(body, options.strict ?? true);
  } else if (contentType.startsWith("application/x-www-form-urlencoded")) {
    parsed = _parseURLEncodedBody(body);
  } else if (contentType.startsWith("text/")) {
    parsed = body;
  } else {
    parsed = _parseJSON(body, options.strict ?? false);
  }
  request[ParsedBodySymbol] = parsed;
  return parsed;
}
function _parseJSON(body = "", strict) {
  if (!body) {
    return void 0;
  }
  try {
    return destr(body, { strict });
  } catch {
    throw createError({
      statusCode: 400,
      statusMessage: "Bad Request",
      message: "Invalid JSON body"
    });
  }
}
function _parseURLEncodedBody(body) {
  const form = new URLSearchParams(body);
  const parsedForm = /* @__PURE__ */ Object.create(null);
  for (const [key, value] of form.entries()) {
    if (hasProp(parsedForm, key)) {
      if (!Array.isArray(parsedForm[key])) {
        parsedForm[key] = [parsedForm[key]];
      }
      parsedForm[key].push(value);
    } else {
      parsedForm[key] = value;
    }
  }
  return parsedForm;
}
var DISALLOWED_STATUS_CHARS = /[^\u0009\u0020-\u007E]/g;
function sanitizeStatusMessage(statusMessage = "") {
  return statusMessage.replace(DISALLOWED_STATUS_CHARS, "");
}
function sanitizeStatusCode(statusCode, defaultStatusCode = 200) {
  if (!statusCode) {
    return defaultStatusCode;
  }
  if (typeof statusCode === "string") {
    statusCode = Number.parseInt(statusCode, 10);
  }
  if (statusCode < 100 || statusCode > 999) {
    return defaultStatusCode;
  }
  return statusCode;
}
function setResponseStatus(event, code, text) {
  if (code) {
    event.node.res.statusCode = sanitizeStatusCode(
      code,
      event.node.res.statusCode
    );
  }
  if (text) {
    event.node.res.statusMessage = sanitizeStatusMessage(text);
  }
}
function setResponseHeaders(event, headers) {
  for (const [name, value] of Object.entries(headers)) {
    event.node.res.setHeader(name, value);
  }
}
var setHeaders = setResponseHeaders;
function defineEventHandler(handler) {
  if (typeof handler === "function") {
    return Object.assign(handler, { __is_handler__: true });
  }
  const _hooks = {
    onRequest: _normalizeArray(handler.onRequest),
    onBeforeResponse: _normalizeArray(handler.onBeforeResponse)
  };
  const _handler = (event) => {
    return _callHandler(event, handler.handler, _hooks);
  };
  return Object.assign(_handler, { __is_handler__: true });
}
function _normalizeArray(input) {
  return input ? Array.isArray(input) ? input : [input] : void 0;
}
async function _callHandler(event, handler, hooks) {
  if (hooks.onRequest) {
    for (const hook of hooks.onRequest) {
      await hook(event);
      if (event.handled) {
        return;
      }
    }
  }
  const body = await handler(event);
  const response = { body };
  if (hooks.onBeforeResponse) {
    for (const hook of hooks.onBeforeResponse) {
      await hook(event, response);
    }
  }
  return response.body;
}
var H3Headers = globalThis.Headers;
var H3Response = globalThis.Response;

// src/h3.ts
var import_shared3 = require("@uploadthing/shared");

// package.json
var package_default = {
  name: "uploadthing",
  version: "6.0.0",
  engines: {
    node: ">=18.13.0"
  },
  license: "MIT",
  exports: {
    "./package.json": "./package.json",
    "./client": {
      types: "./dist/client.d.ts",
      import: "./dist/client.mjs",
      require: "./dist/client.js"
    },
    "./server": {
      types: "./dist/server.d.ts",
      import: "./dist/server.mjs",
      require: "./dist/server.js"
    },
    "./next": {
      types: "./dist/next.d.ts",
      import: "./dist/next.mjs",
      require: "./dist/next.js"
    },
    "./next-legacy": {
      types: "./dist/next-legacy.d.ts",
      import: "./dist/next-legacy.mjs",
      require: "./dist/next-legacy.js"
    },
    "./express": {
      import: "./dist/express.mjs",
      types: "./dist/express.d.ts",
      require: "./dist/express.js"
    },
    "./tw": {
      types: "./dist/tw.d.ts",
      import: "./dist/tw.mjs",
      require: "./dist/tw.js"
    },
    "./fastify": {
      types: "./dist/fastify.d.ts",
      import: "./dist/fastify.mjs",
      require: "./dist/fastify.js"
    },
    "./h3": {
      types: "./dist/h3.d.ts",
      import: "./dist/h3.mjs",
      require: "./dist/h3.js"
    }
  },
  files: [
    "dist"
  ],
  publishConfig: {
    access: "public"
  },
  typesVersions: {
    "*": {
      client: [
        "dist/client.d.ts"
      ],
      server: [
        "dist/server.d.ts"
      ],
      next: [
        "dist/next.d.ts"
      ],
      "next-legacy": [
        "dist/next-legacy.d.ts"
      ],
      tw: [
        "dist/tw.d.ts"
      ],
      express: [
        "dist/express.d.ts"
      ],
      fastify: [
        "dist/fastify.d.ts"
      ],
      h3: [
        "dist/h3.d.ts"
      ]
    }
  },
  scripts: {
    lint: 'eslint "**/*.{ts,tsx}" --max-warnings 0',
    build: "tsup",
    clean: "git clean -xdf dist node_modules",
    dev: "tsup --watch",
    test: "vitest run",
    "test:watch": "vitest",
    typecheck: "tsc --noEmit"
  },
  dependencies: {
    "@uploadthing/mime-types": "^0.2.2",
    "@uploadthing/shared": "^6.0.0"
  },
  devDependencies: {
    "@types/express": "^4.17.17",
    "@types/react": "18.2.33",
    "@uploadthing/eslint-config": "0.2.0",
    "@uploadthing/tsconfig": "0.1.0",
    "@uploadthing/tsup-config": "0.1.0",
    eslint: "^8.47.0",
    express: "^4.18.2",
    fastify: "^4.23.2",
    h3: "^1.8.1",
    next: "14.0.1",
    "solid-js": "^1.7.11",
    tailwindcss: "^3.3.2",
    tsup: "6.7.0",
    "type-fest": "^3.11.1",
    typescript: "^5.1.6",
    undici: "^5.20.0",
    vitest: "^0.30.1",
    zod: "^3.22.3"
  },
  eslintConfig: {
    root: true,
    extends: [
      "@uploadthing/eslint-config/base"
    ]
  }
};

// src/constants.ts
if (!package_default.version)
  throw new Error("no version found in package.json");
var UPLOADTHING_VERSION = package_default.version;

// src/internal/error-formatter.ts
function defaultErrorFormatter(error) {
  return {
    message: error.message
  };
}

// src/internal/handler.ts
var import_shared2 = require("@uploadthing/shared");

// src/internal/dev-hook.ts
var import_shared = require("@uploadthing/shared");
var isValidResponse = (response) => {
  if (!response.ok)
    return false;
  if (response.status >= 400)
    return false;
  if (!response.headers.has("x-uploadthing-version"))
    return false;
  return true;
};
var conditionalDevServer = async (opts) => {
  if (process.env.NODE_ENV !== "development")
    return;
  const fileData = await (0, import_shared.pollForFileData)(
    {
      url: (0, import_shared.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),
      apiKey: opts.apiKey,
      sdkVersion: UPLOADTHING_VERSION
    },
    async (json) => {
      const file = json.fileData;
      let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;
      if (!callbackUrl.startsWith("http"))
        callbackUrl = "http://" + callbackUrl;
      console.log("[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK", callbackUrl);
      const response = await fetch(callbackUrl, {
        method: "POST",
        body: JSON.stringify({
          status: "uploaded",
          metadata: JSON.parse(file.metadata ?? "{}"),
          file: {
            url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,
            key: opts.fileKey,
            name: file.fileName,
            size: file.fileSize
          }
        }),
        headers: {
          "uploadthing-hook": "callback"
        }
      });
      if (isValidResponse(response)) {
        console.log(
          "[UT] Successfully simulated callback for file",
          opts.fileKey
        );
      } else {
        console.error(
          "[UT] Failed to simulate callback for file. Is your webhook configured correctly?",
          opts.fileKey
        );
      }
      return file;
    }
  );
  if (fileData !== null)
    return fileData;
  console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);
  throw new import_shared.UploadThingError({
    code: "UPLOAD_FAILED",
    message: "File took too long to upload"
  });
};

// src/internal/parser.ts
function getParseFn(parser) {
  if (typeof parser.parse === "function") {
    return parser.parse;
  }
  throw new Error("Invalid parser");
}

// src/internal/types.ts
var VALID_ACTION_TYPES = [
  "upload",
  "failure",
  "multipart-complete"
];

// src/internal/handler.ts
var createUTFetch = (apiKey) => {
  return async (endpoint, payload) => {
    const response = await fetch((0, import_shared2.generateUploadThingURL)(endpoint), {
      method: "POST",
      body: JSON.stringify(payload),
      headers: {
        "Content-Type": "application/json",
        "x-uploadthing-api-key": apiKey,
        "x-uploadthing-version": UPLOADTHING_VERSION
      }
    });
    return response;
  };
};
var fileCountLimitHit = (files, routeConfig) => {
  var _a;
  const counts = {};
  files.forEach((file) => {
    const type = (0, import_shared2.getTypeFromFileName)(file.name, (0, import_shared2.objectKeys)(routeConfig));
    if (!counts[type]) {
      counts[type] = 1;
    } else {
      counts[type] += 1;
    }
  });
  for (const _key in counts) {
    const key = _key;
    const count = counts[key];
    const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;
    if (!limit) {
      console.error(routeConfig, key);
      throw new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "Invalid config during file count",
        cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`
      });
    }
    if (count > limit) {
      return { limitHit: true, type: key, limit, count };
    }
  }
  return { limitHit: false };
};
var getHeader = (req, key) => {
  if (req.headers instanceof Headers) {
    return req.headers.get(key);
  }
  return req.headers[key];
};
var buildRequestHandler = (opts, ee) => {
  return async (input) => {
    var _a;
    if (process.env.NODE_ENV === "development") {
      console.log("[UT] UploadThing dev server is now running!");
    }
    const { req, res, event } = input;
    const { router, config } = opts;
    const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;
    let url;
    try {
      url = new URL(input.url ?? req.url ?? "");
    } catch (error) {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: `Invalid url '${((_a = input.url) == null ? void 0 : _a.href) ?? req.url}'`,
        cause: error
      });
    }
    const params = url.searchParams;
    const uploadthingHook = getHeader(req, "uploadthing-hook") ?? void 0;
    const slug = params.get("slug") ?? void 0;
    const actionType = params.get("actionType") ?? void 0;
    if (!slug)
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "No slug provided"
      });
    if (slug && typeof slug !== "string") {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "`slug` must be a string",
        cause: `Expected slug to be of type 'string', got '${typeof slug}'`
      });
    }
    if (actionType && typeof actionType !== "string") {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "`actionType` must be a string",
        cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`
      });
    }
    if (uploadthingHook && typeof uploadthingHook !== "string") {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "`uploadthingHook` must be a string",
        cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`
      });
    }
    if (!preferredOrEnvSecret) {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,
        cause: "No secret provided"
      });
    }
    const uploadable = router[slug];
    if (!uploadable) {
      return new import_shared2.UploadThingError({
        code: "NOT_FOUND",
        message: `No file route found for slug ${slug}`
      });
    }
    if (uploadthingHook === "callback") {
      const maybeReqBody = await (0, import_shared2.safeParseJSON)(req);
      if (maybeReqBody instanceof Error) {
        return new import_shared2.UploadThingError({
          code: "BAD_REQUEST",
          message: "Invalid request body",
          cause: maybeReqBody
        });
      }
      const res2 = await uploadable.resolver({
        file: maybeReqBody.file,
        metadata: maybeReqBody.metadata
      });
      ee == null ? void 0 : ee.emit("callbackDone", res2);
      return { status: 200 };
    }
    if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        cause: `Invalid action type ${actionType}`,
        message: `Expected ${VALID_ACTION_TYPES.map((x) => `"${x}"`).join(", ").replace(/,(?!.*,)/, " or")} but got "${"a"}"`
      });
    }
    const utFetch = createUTFetch(preferredOrEnvSecret);
    switch (actionType) {
      case "upload": {
        const maybeInput = await (0, import_shared2.safeParseJSON)(req);
        if (maybeInput instanceof Error) {
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid request body",
            cause: maybeInput
          });
        }
        const { files, input: userInput } = maybeInput;
        let parsedInput = {};
        try {
          const inputParser = uploadable._def.inputParser;
          parsedInput = await getParseFn(inputParser)(userInput);
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid input.",
            cause: error
          });
        }
        let metadata = {};
        try {
          metadata = await uploadable._def.middleware({
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            req,
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            res,
            event,
            input: parsedInput
          });
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to run middleware.",
            cause: error
          });
        }
        if (!Array.isArray(files) || !files.every(
          (f) => (0, import_shared2.isObject)(f) && typeof f.name === "string" && typeof f.size === "number"
        ))
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Files must be an array of objects with name and size",
            cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(
              files
            )}'`
          });
        let parsedConfig;
        try {
          parsedConfig = (0, import_shared2.fillInputRouteConfig)(
            uploadable._def.routerConfig
          );
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid config.",
            cause: error
          });
        }
        try {
          const { limitHit, count, limit, type } = fileCountLimitHit(
            files,
            parsedConfig
          );
          if (limitHit) {
            return new import_shared2.UploadThingError({
              code: "BAD_REQUEST",
              message: "File limit exceeded",
              cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`
            });
          }
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid config.",
            cause: error
          });
        }
        const callbackUrl = url.origin + url.pathname;
        const uploadthingApiResponse = await utFetch("/api/prepareUpload", {
          files,
          routeConfig: parsedConfig,
          metadata,
          callbackUrl: (config == null ? void 0 : config.callbackUrl) ?? callbackUrl,
          callbackSlug: slug
        });
        const parsedResponse = await (0, import_shared2.safeParseJSON)(
          uploadthingApiResponse
        );
        if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {
          console.error("[UT] unable to get presigned urls");
          return new import_shared2.UploadThingError({
            code: "URL_GENERATION_FAILED",
            message: "Unable to get presigned urls",
            cause: parsedResponse
          });
        }
        if (process.env.NODE_ENV === "development") {
          for (const file of parsedResponse) {
            void conditionalDevServer({
              fileKey: file.key,
              apiKey: preferredOrEnvSecret
            });
          }
        }
        return {
          body: parsedResponse.map((x) => ({
            ...x,
            pollingUrl: (0, import_shared2.generateUploadThingURL)(`/api/pollUpload/${x.key}`)
          })),
          status: 200
        };
      }
      case "multipart-complete": {
        const maybeReqBody = await (0, import_shared2.safeParseJSON)(req);
        if (maybeReqBody instanceof Error) {
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid request body",
            cause: maybeReqBody
          });
        }
        const completeRes = await utFetch("/api/completeMultipart", {
          fileKey: maybeReqBody.fileKey,
          uploadId: maybeReqBody.uploadId,
          etags: maybeReqBody.etags
        });
        if (!completeRes.ok) {
          return new import_shared2.UploadThingError({
            code: "UPLOAD_FAILED",
            message: "Failed to complete multipart upload"
          });
        }
        return { status: 200 };
      }
      case "failure": {
        const maybeReqBody = await (0, import_shared2.safeParseJSON)(req);
        if (maybeReqBody instanceof Error) {
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid request body",
            cause: maybeReqBody
          });
        }
        const { fileKey, uploadId } = maybeReqBody;
        const uploadthingApiResponse = await utFetch("/api/failureCallback", {
          fileKey,
          uploadId
        });
        if (!uploadthingApiResponse.ok) {
          console.error("[UT] failed to mark upload as failed");
          const parsedResponse = await (0, import_shared2.safeParseJSON)(
            uploadthingApiResponse
          );
          return new import_shared2.UploadThingError({
            code: "URL_GENERATION_FAILED",
            message: "Unable to get presigned urls",
            cause: parsedResponse
          });
        }
        try {
          uploadable._def.onUploadError({
            error: new import_shared2.UploadThingError({
              code: "UPLOAD_FAILED",
              message: `Upload failed for ${fileKey}`
            }),
            fileKey
          });
        } catch (error) {
          console.error(
            "[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback."
          );
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to run onUploadError callback",
            cause: error
          });
        }
        return { status: 200 };
      }
      default: {
        return new import_shared2.UploadThingError({
          code: "BAD_REQUEST",
          message: `Invalid action type`
        });
      }
    }
  };
};
var buildPermissionsInfoHandler = (opts) => {
  return () => {
    const r = opts.router;
    const permissions = Object.keys(r).map((k) => {
      const route = r[k];
      const config = (0, import_shared2.fillInputRouteConfig)(route._def.routerConfig);
      return {
        slug: k,
        config
      };
    });
    return permissions;
  };
};

// src/internal/upload-builder.ts
function internalCreateBuilder(initDef = {}) {
  const _def = {
    // Default router config
    routerConfig: {
      image: {
        maxFileSize: "4MB"
      }
    },
    inputParser: { parse: () => ({}), _input: {}, _output: {} },
    middleware: () => ({}),
    onUploadError: () => ({}),
    errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,
    // Overload with properties passed in
    ...initDef
  };
  return {
    input(userParser) {
      return internalCreateBuilder({
        ..._def,
        inputParser: userParser
      });
    },
    middleware(userMiddleware) {
      return internalCreateBuilder({
        ..._def,
        middleware: userMiddleware
      });
    },
    onUploadComplete(userUploadComplete) {
      return {
        _def,
        resolver: userUploadComplete
      };
    },
    onUploadError(userOnUploadError) {
      return internalCreateBuilder({
        ..._def,
        onUploadError: userOnUploadError
      });
    }
  };
}
function createBuilder(opts) {
  return (input) => {
    return internalCreateBuilder({
      routerConfig: input,
      ...opts
    });
  };
}

// src/h3.ts
var createUploadthing = (opts) => createBuilder(opts);
var createH3EventHandler = (opts) => {
  const ee = new import_events.default();
  const requestHandler = buildRequestHandler(opts, ee);
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  return defineEventHandler(async (event) => {
    var _a;
    assertMethod(event, ["GET", "POST"]);
    setHeaders(event, { "x-uploadthing-version": UPLOADTHING_VERSION });
    if (event.method === "GET") {
      const clientPollingKey = getRequestHeaders(event)["x-uploadthing-polling"];
      if (clientPollingKey) {
        const eventData = await new Promise((resolve) => {
          ee.addListener("callbackDone", resolve);
        });
        ee.removeAllListeners("callbackDone");
        return eventData;
      }
      return getBuildPerms();
    }
    const response = await requestHandler({
      req: {
        url: getRequestURL(event).href,
        headers: getRequestHeaders(event),
        json: () => Promise.resolve(readBody(event))
      },
      event
    });
    if (response instanceof import_shared3.UploadThingError) {
      setResponseStatus(event, (0, import_shared3.getStatusCodeFromError)(response));
      const errorFormatter = ((_a = opts.router[Object.keys(opts.router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;
      return errorFormatter(response);
    }
    if (response.status !== 200) {
      setResponseStatus(event, 500);
      return "An unknown error occurred";
    }
    return response.body;
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createH3EventHandler,
  createUploadthing
});
//# sourceMappingURL=h3.js.map