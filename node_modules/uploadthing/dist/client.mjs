import {
  maybeParseResponseXML,
  uploadPartWithProgress
} from "./chunk-J63ZFLAK.mjs";
import "./chunk-T2XS27LC.mjs";

// src/client.ts
import { safeParseJSON, UploadThingError as UploadThingError2 } from "@uploadthing/shared";

// src/internal/ut-reporter.ts
import { UploadThingError } from "@uploadthing/shared";
var createAPIRequestUrl = (config) => {
  const url = new URL(config.url);
  const queryParams = new URLSearchParams(url.search);
  queryParams.set("actionType", config.actionType);
  queryParams.set("slug", config.slug);
  url.search = queryParams.toString();
  return url;
};
var createUTReporter = (cfg) => {
  return async (type, payload) => {
    const url = createAPIRequestUrl({
      url: cfg.url,
      slug: cfg.endpoint,
      actionType: type
    });
    const response = await fetch(url, {
      method: "POST",
      body: JSON.stringify(payload),
      headers: { "Content-Type": "application/json" }
    });
    switch (type) {
      case "failure": {
        const p = payload;
        const parsed = maybeParseResponseXML(p.s3Error ?? "");
        if (parsed == null ? void 0 : parsed.message) {
          throw new UploadThingError({
            code: parsed.code,
            message: parsed.message
          });
        } else {
          throw new UploadThingError({
            code: "UPLOAD_FAILED",
            message: `Failed to upload file ${p.fileName} to S3`,
            cause: p.s3Error
          });
        }
      }
    }
    return response.ok;
  };
};

// src/internal/component-theming.ts
import { objectKeys } from "@uploadthing/shared";
var generatePermittedFileTypes = (config) => {
  const fileTypes = config ? objectKeys(config) : [];
  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];
  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };
};
var capitalizeStart = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var INTERNAL_doFormatting = (config) => {
  if (!config)
    return "";
  const allowedTypes = objectKeys(config);
  const formattedTypes = allowedTypes.map((f) => f === "blob" ? "file" : f);
  if (formattedTypes.length > 1) {
    const lastType = formattedTypes.pop();
    return `${formattedTypes.join("s, ")} and ${lastType}s`;
  }
  const key = allowedTypes[0];
  const formattedKey = formattedTypes[0];
  const { maxFileSize, maxFileCount } = config[key];
  if (maxFileCount && maxFileCount > 1) {
    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;
  } else {
    return `${formattedKey} (${maxFileSize})`;
  }
};
var allowedContentTextLabelGenerator = (config) => {
  return capitalizeStart(INTERNAL_doFormatting(config));
};
var styleFieldToClassName = (styleField, args) => {
  if (typeof styleField === "string")
    return styleField;
  if (typeof styleField === "function") {
    const result = styleField(args);
    if (typeof result === "string")
      return result;
  }
  return "";
};
var styleFieldToCssObject = (styleField, args) => {
  if (typeof styleField === "object")
    return styleField;
  if (typeof styleField === "function") {
    const result = styleField(args);
    if (typeof result === "object")
      return result;
  }
  return {};
};
var contentFieldToContent = (contentField, arg) => {
  if (!contentField)
    return null;
  if (typeof contentField !== "function")
    return contentField;
  if (typeof contentField === "function") {
    const result = contentField(arg);
    return result;
  }
};

// src/client.ts
var INTERNAL_DO_NOT_USE__fatalClientError = (e) => new UploadThingError2({
  code: "INTERNAL_CLIENT_ERROR",
  message: "Something went wrong. Please report this to UploadThing.",
  cause: e
});
var DANGEROUS__uploadFiles = async (endpoint, opts) => {
  const reportEventToUT = createUTReporter({
    endpoint: String(endpoint),
    url: opts.url
  });
  const s3ConnectionRes = await fetch(
    createAPIRequestUrl({
      url: opts.url,
      slug: String(endpoint),
      actionType: "upload"
    }),
    {
      method: "POST",
      body: JSON.stringify({
        input: "input" in opts ? opts.input : null,
        files: opts.files.map((f) => ({ name: f.name, size: f.size }))
      }),
      // Express requires Content-Type to be explicitly set to parse body properly
      headers: {
        "Content-Type": "application/json"
      }
    }
  ).then(async (res) => {
    if (!res.ok) {
      const error = await UploadThingError2.fromResponse(res);
      throw error;
    }
    const jsonOrError = await safeParseJSON(res);
    if (jsonOrError instanceof Error) {
      throw new UploadThingError2({
        code: "BAD_REQUEST",
        message: jsonOrError.message,
        cause: res
      });
    }
    return jsonOrError;
  });
  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {
    throw new UploadThingError2({
      code: "BAD_REQUEST",
      message: "No URL. How did you even get here?",
      cause: s3ConnectionRes
    });
  }
  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {
    const file = opts.files.find((f) => f.name === presigned.fileName);
    if (!file) {
      console.error("No file found for presigned URL", presigned);
      throw new UploadThingError2({
        code: "NOT_FOUND",
        message: "No file found for presigned URL",
        cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(",")}'`
      });
    }
    const { presignedUrls, uploadId, chunkSize, contentDisposition, key } = presigned;
    let uploadedBytes = 0;
    let etags;
    try {
      etags = await Promise.all(
        presignedUrls.map(async (url, index) => {
          const offset = chunkSize * index;
          const end = Math.min(offset + chunkSize, file.size);
          const chunk = file.slice(offset, end);
          const etag = await uploadPartWithProgress({
            url,
            chunk,
            contentDisposition,
            fileType: file.type,
            fileName: file.name,
            maxRetries: 10,
            onProgress: (delta) => {
              var _a;
              uploadedBytes += delta;
              const percent = uploadedBytes / file.size * 100;
              (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, { file: file.name, progress: percent });
            }
          });
          return { tag: etag, partNumber: index + 1 };
        })
      );
    } catch (error) {
      await reportEventToUT("failure", {
        fileKey: key,
        uploadId,
        fileName: file.name,
        s3Error: error.toString()
      });
      throw "unreachable";
    }
    const uploadOk = await reportEventToUT("multipart-complete", {
      uploadId,
      fileKey: key,
      etags
    });
    if (!uploadOk) {
      console.log("Failed to alert UT of upload completion");
      throw new UploadThingError2({
        code: "UPLOAD_FAILED",
        message: "Failed to alert UT of upload completion"
      });
    }
    const serverData = await fetch(opts.url, {
      headers: { "x-uploadthing-polling-key": key }
    }).then(
      (res) => res.json()
    );
    return {
      name: file.name,
      size: file.size,
      key: presigned.key,
      serverData,
      url: "https://utfs.io/f/" + key
    };
  });
  return Promise.all(fileUploadPromises);
};
var genUploader = (initOpts) => {
  const url = (initOpts == null ? void 0 : initOpts.url) instanceof URL ? initOpts.url : getFullApiUrl(initOpts == null ? void 0 : initOpts.url);
  return (endpoint, opts) => (
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    DANGEROUS__uploadFiles(endpoint, {
      ...opts,
      url
    })
  );
};
var classNames = (...classes) => {
  return classes.filter(Boolean).join(" ");
};
var generateMimeTypes = (fileTypes) => {
  const accepted = fileTypes.map((type) => {
    if (type === "blob")
      return "blob";
    if (type === "pdf")
      return "application/pdf";
    if (type.includes("/"))
      return type;
    else
      return `${type}/*`;
  });
  if (accepted.includes("blob")) {
    return void 0;
  }
  return accepted;
};
var generateClientDropzoneAccept = (fileTypes) => {
  const mimeTypes = generateMimeTypes(fileTypes);
  if (!mimeTypes)
    return void 0;
  return Object.fromEntries(mimeTypes.map((type) => [type, []]));
};
function getFullApiUrl(maybeUrl) {
  const base = (() => {
    var _a, _b;
    if (typeof window !== "undefined") {
      return window.location.origin;
    }
    if (typeof process !== "undefined" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {
      return `https://${process.env.VERCEL_URL}`;
    }
    if ((_b = import.meta.env) == null ? void 0 : _b.VERCEL_URL) {
      return `https://${import.meta.env.VERCEL_URL}`;
    }
    return "http://localhost:3000";
  })();
  try {
    const url = new URL(maybeUrl ?? "/api/uploadthing", base);
    if (url.pathname === "/") {
      url.pathname = "/api/uploadthing";
    }
    return url;
  } catch (err) {
    throw new Error(
      `Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`
    );
  }
}
export {
  DANGEROUS__uploadFiles,
  INTERNAL_DO_NOT_USE__fatalClientError,
  INTERNAL_doFormatting,
  allowedContentTextLabelGenerator,
  capitalizeStart,
  classNames,
  contentFieldToContent,
  genUploader,
  generateClientDropzoneAccept,
  generateMimeTypes,
  generatePermittedFileTypes,
  getFullApiUrl,
  styleFieldToClassName,
  styleFieldToCssObject
};
//# sourceMappingURL=client.mjs.map