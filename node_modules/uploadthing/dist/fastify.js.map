{"version":3,"sources":["../src/fastify.ts","../package.json","../src/constants.ts","../src/internal/error-formatter.ts","../src/internal/handler.ts","../src/internal/dev-hook.ts","../src/internal/parser.ts","../src/internal/types.ts","../src/internal/incompat-node-guard.ts","../src/internal/upload-builder.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport type {\n  FastifyInstance,\n  FastifyReply,\n  FastifyRequest,\n  RouteHandlerMethod,\n} from \"fastify\";\n\nimport type { Json } from \"@uploadthing/shared\";\nimport { getStatusCodeFromError, UploadThingError } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"./constants\";\nimport { formatError } from \"./internal/error-formatter\";\nimport type { RouterWithConfig } from \"./internal/handler\";\nimport {\n  buildPermissionsInfoHandler,\n  buildRequestHandler,\n} from \"./internal/handler\";\nimport { incompatibleNodeGuard } from \"./internal/incompat-node-guard\";\nimport type { FileRouter } from \"./internal/types\";\nimport type { CreateBuilderOptions } from \"./internal/upload-builder\";\nimport { createBuilder } from \"./internal/upload-builder\";\n\nexport type { FileRouter } from \"./internal/types\";\n\nexport const createUploadthing = <TErrorShape extends Json>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n) =>\n  createBuilder<\n    { req: FastifyRequest; res: FastifyReply; event: undefined },\n    TErrorShape\n  >(opts);\n\nexport const fastifyUploadthingPlugin = <TRouter extends FileRouter>(\n  fastify: FastifyInstance,\n  opts: RouterWithConfig<TRouter>,\n  done: (err?: Error) => void,\n) => {\n  incompatibleNodeGuard();\n  const ee = new EventEmitter();\n  const requestHandler = buildRequestHandler<TRouter>(opts, ee);\n\n  const POST: RouteHandlerMethod = async (req, res) => {\n    const proto = (req.headers[\"x-forwarded-proto\"] as string) ?? \"http\";\n    const url = new URL(req.url, `${proto}://${req.headers.host}`);\n\n    const response = await requestHandler({\n      req: Object.assign(req, {\n        json: () => Promise.resolve(req.body),\n      }),\n      url,\n      res,\n    });\n\n    if (response instanceof UploadThingError) {\n      void res\n        .status(getStatusCodeFromError(response))\n        .headers({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        })\n        .send(formatError(response, opts.router));\n      return;\n    }\n\n    if (response.status !== 200) {\n      // We messed up - this should never happen\n      void res\n        .status(500)\n        .headers({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        })\n        .send(\"An unknown error occured\");\n      return;\n    }\n\n    void res\n      .status(response.status)\n      .headers({\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      })\n      .send(response.body);\n  };\n\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\n\n  const GET: RouteHandlerMethod = async (req, res) => {\n    const clientPollingKey = req.headers[\"x-uploadthing-polling-key\"];\n    if (clientPollingKey) {\n      const eventData = await new Promise((resolve) => {\n        ee.addListener(\"callbackDone\", resolve);\n      });\n      ee.removeAllListeners(\"callbackDone\");\n\n      void res\n        .status(200)\n        .headers({\n          \"x-uploadthing-version\": UPLOADTHING_VERSION,\n        })\n        .send(eventData);\n      return;\n    }\n    void res\n      .status(200)\n      .headers({\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      })\n      .send(getBuildPerms());\n  };\n\n  fastify.post(\"/api/uploadthing\", POST).get(\"/api/uploadthing\", GET);\n\n  done();\n};\n","{\n  \"name\": \"uploadthing\",\n  \"version\": \"6.0.0\",\n  \"engines\": {\n    \"node\": \">=18.13.0\"\n  },\n  \"license\": \"MIT\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      \"types\": \"./dist/client.d.ts\",\n      \"import\": \"./dist/client.mjs\",\n      \"require\": \"./dist/client.js\"\n    },\n    \"./server\": {\n      \"types\": \"./dist/server.d.ts\",\n      \"import\": \"./dist/server.mjs\",\n      \"require\": \"./dist/server.js\"\n    },\n    \"./next\": {\n      \"types\": \"./dist/next.d.ts\",\n      \"import\": \"./dist/next.mjs\",\n      \"require\": \"./dist/next.js\"\n    },\n    \"./next-legacy\": {\n      \"types\": \"./dist/next-legacy.d.ts\",\n      \"import\": \"./dist/next-legacy.mjs\",\n      \"require\": \"./dist/next-legacy.js\"\n    },\n    \"./express\": {\n      \"import\": \"./dist/express.mjs\",\n      \"types\": \"./dist/express.d.ts\",\n      \"require\": \"./dist/express.js\"\n    },\n    \"./tw\": {\n      \"types\": \"./dist/tw.d.ts\",\n      \"import\": \"./dist/tw.mjs\",\n      \"require\": \"./dist/tw.js\"\n    },\n    \"./fastify\": {\n      \"types\": \"./dist/fastify.d.ts\",\n      \"import\": \"./dist/fastify.mjs\",\n      \"require\": \"./dist/fastify.js\"\n    },\n    \"./h3\": {\n      \"types\": \"./dist/h3.d.ts\",\n      \"import\": \"./dist/h3.mjs\",\n      \"require\": \"./dist/h3.js\"\n    }\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"client\": [\n        \"dist/client.d.ts\"\n      ],\n      \"server\": [\n        \"dist/server.d.ts\"\n      ],\n      \"next\": [\n        \"dist/next.d.ts\"\n      ],\n      \"next-legacy\": [\n        \"dist/next-legacy.d.ts\"\n      ],\n      \"tw\": [\n        \"dist/tw.d.ts\"\n      ],\n      \"express\": [\n        \"dist/express.d.ts\"\n      ],\n      \"fastify\": [\n        \"dist/fastify.d.ts\"\n      ],\n      \"h3\": [\n        \"dist/h3.d.ts\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"lint\": \"eslint \\\"**/*.{ts,tsx}\\\" --max-warnings 0\",\n    \"build\": \"tsup\",\n    \"clean\": \"git clean -xdf dist node_modules\",\n    \"dev\": \"tsup --watch\",\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@uploadthing/mime-types\": \"^0.2.2\",\n    \"@uploadthing/shared\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^4.17.17\",\n    \"@types/react\": \"18.2.33\",\n    \"@uploadthing/eslint-config\": \"0.2.0\",\n    \"@uploadthing/tsconfig\": \"0.1.0\",\n    \"@uploadthing/tsup-config\": \"0.1.0\",\n    \"eslint\": \"^8.47.0\",\n    \"express\": \"^4.18.2\",\n    \"fastify\": \"^4.23.2\",\n    \"h3\": \"^1.8.1\",\n    \"next\": \"14.0.1\",\n    \"solid-js\": \"^1.7.11\",\n    \"tailwindcss\": \"^3.3.2\",\n    \"tsup\": \"6.7.0\",\n    \"type-fest\": \"^3.11.1\",\n    \"typescript\": \"^5.1.6\",\n    \"undici\": \"^5.20.0\",\n    \"vitest\": \"^0.30.1\",\n    \"zod\": \"^3.22.3\"\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"extends\": [\n      \"@uploadthing/eslint-config/base\"\n    ]\n  }\n}\n","import packageJson from \"../package.json\";\n\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nexport const UPLOADTHING_VERSION = packageJson.version;\n","import type { UploadThingError } from \"@uploadthing/shared\";\n\nimport type { FileRouter, inferErrorShape } from \"./types\";\n\nexport function defaultErrorFormatter(error: UploadThingError) {\n  return {\n    message: error.message,\n  };\n}\n\nexport function formatError<TRouter extends FileRouter>(\n  error: UploadThingError,\n  router: TRouter,\n): inferErrorShape<TRouter> {\n  const errorFormatter =\n    router[Object.keys(router)[0]]?._def.errorFormatter ??\n    defaultErrorFormatter;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return errorFormatter(error);\n}\n","import type EventEmitter from \"events\";\n\nimport type { MimeType } from \"@uploadthing/mime-types/db\";\nimport {\n  generateUploadThingURL,\n  getTypeFromFileName,\n  isObject,\n  objectKeys,\n  fillInputRouteConfig as parseAndExpandInputConfig,\n  safeParseJSON,\n  UploadThingError,\n} from \"@uploadthing/shared\";\nimport type {\n  ContentDisposition,\n  ExpandedRouteConfig,\n  FileRouterInputKey,\n  Json,\n  RequestLike,\n  UploadedFile,\n} from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\nimport { conditionalDevServer } from \"./dev-hook\";\nimport { getParseFn } from \"./parser\";\nimport { VALID_ACTION_TYPES } from \"./types\";\nimport type { ActionType, FileRouter, UTEvents } from \"./types\";\n\n/**\n * Creates a wrapped fetch that will always forward a few headers to the server.\n */\nconst createUTFetch = (apiKey: string) => {\n  return async (endpoint: `/${string}`, payload: unknown) => {\n    const response = await fetch(generateUploadThingURL(endpoint), {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-uploadthing-api-key\": apiKey,\n        \"x-uploadthing-version\": UPLOADTHING_VERSION,\n      },\n    });\n\n    return response;\n  };\n};\n\nconst fileCountLimitHit = (\n  files: { name: string }[],\n  routeConfig: ExpandedRouteConfig,\n) => {\n  const counts: Record<string, number> = {};\n\n  files.forEach((file) => {\n    const type = getTypeFromFileName(file.name, objectKeys(routeConfig));\n\n    if (!counts[type]) {\n      counts[type] = 1;\n    } else {\n      counts[type] += 1;\n    }\n  });\n\n  for (const _key in counts) {\n    const key = _key as FileRouterInputKey;\n    const count = counts[key];\n    const limit = routeConfig[key]?.maxFileCount;\n\n    if (!limit) {\n      console.error(routeConfig, key);\n      throw new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid config during file count\",\n        cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`,\n      });\n    }\n\n    if (count > limit) {\n      return { limitHit: true, type: key, limit, count };\n    }\n  }\n\n  return { limitHit: false };\n};\n\nexport type RouterWithConfig<TRouter extends FileRouter> = {\n  router: TRouter;\n  config?: {\n    /**\n     * @deprecated since v6.0.0\n     * this option is deprecated and will be removed in a future version, you can safely remove it from your config\n     */\n    callbackUrl?: string;\n    uploadthingId?: string;\n    uploadthingSecret?: string;\n  };\n};\n\nconst getHeader = (req: RequestLike, key: string) => {\n  if (req.headers instanceof Headers) {\n    return req.headers.get(key);\n  }\n  return req.headers[key];\n};\n\nexport type UploadThingResponse = {\n  presignedUrls: string[];\n  key: string;\n  pollingUrl: string;\n  uploadId: string;\n  fileName: string;\n  fileType: MimeType;\n  contentDisposition: ContentDisposition;\n  chunkCount: number;\n  chunkSize: number;\n}[];\n\nexport const buildRequestHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n  ee?: EventEmitter,\n) => {\n  return async (input: {\n    req: RequestLike;\n    // Allow for overriding request URL since some req.url are read-only\n    // If the adapter doesn't give a full url on `req.url`, this should be set\n    url?: URL;\n    res?: unknown;\n    event?: unknown;\n  }): Promise<\n    UploadThingError | { status: 200; body?: UploadThingResponse }\n  > => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(\"[UT] UploadThing dev server is now running!\");\n    }\n\n    const { req, res, event } = input;\n    const { router, config } = opts;\n    const preferredOrEnvSecret =\n      config?.uploadthingSecret ?? process.env.UPLOADTHING_SECRET;\n\n    let url: URL;\n    try {\n      url = new URL(input.url ?? req.url ?? \"\");\n    } catch (error) {\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: `Invalid url '${input.url?.href ?? req.url}'`,\n        cause: error,\n      });\n    }\n\n    // Get inputs from query and params\n    const params = url.searchParams;\n    const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? undefined;\n    const slug = params.get(\"slug\") ?? undefined;\n    const actionType = (params.get(\"actionType\") as ActionType) ?? undefined;\n\n    // Validate inputs\n    if (!slug)\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"No slug provided\",\n      });\n\n    if (slug && typeof slug !== \"string\") {\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`slug` must be a string\",\n        cause: `Expected slug to be of type 'string', got '${typeof slug}'`,\n      });\n    }\n    if (actionType && typeof actionType !== \"string\") {\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`actionType` must be a string\",\n        cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`,\n      });\n    }\n    if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: \"`uploadthingHook` must be a string\",\n        cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`,\n      });\n    }\n\n    if (!preferredOrEnvSecret) {\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n        cause: \"No secret provided\",\n      });\n    }\n\n    const uploadable = router[slug];\n    if (!uploadable) {\n      return new UploadThingError({\n        code: \"NOT_FOUND\",\n        message: `No file route found for slug ${slug}`,\n      });\n    }\n\n    if (uploadthingHook === \"callback\") {\n      // This is when we receive the webhook from uploadthing\n      const maybeReqBody = await safeParseJSON<{\n        file: UploadedFile;\n        files: unknown;\n        metadata: Record<string, unknown>;\n        input?: Json;\n      }>(req);\n\n      if (maybeReqBody instanceof Error) {\n        return new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid request body\",\n          cause: maybeReqBody,\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const res = await uploadable.resolver({\n        file: maybeReqBody.file,\n        metadata: maybeReqBody.metadata,\n      });\n      ee?.emit(\"callbackDone\", res);\n\n      return { status: 200 };\n    }\n\n    if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n      // This would either be someone spamming or the AWS webhook\n      return new UploadThingError({\n        code: \"BAD_REQUEST\",\n        cause: `Invalid action type ${actionType}`,\n        message: `Expected ${VALID_ACTION_TYPES.map((x) => `\"${x}\"`)\n          .join(\", \")\n          .replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`,\n      });\n    }\n\n    const utFetch = createUTFetch(preferredOrEnvSecret);\n\n    switch (actionType) {\n      case \"upload\": {\n        const maybeInput = await safeParseJSON<UTEvents[\"upload\"]>(req);\n\n        if (maybeInput instanceof Error) {\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeInput,\n          });\n        }\n        const { files, input: userInput } = maybeInput;\n\n        // validate the input\n        let parsedInput: Json = {};\n        try {\n          const inputParser = uploadable._def.inputParser;\n          parsedInput = await getParseFn(inputParser)(userInput);\n        } catch (error) {\n          console.error(error);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid input.\",\n            cause: error,\n          });\n        }\n\n        let metadata: Json = {};\n        try {\n          metadata = await uploadable._def.middleware({\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            req: req as any,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            res: res as any,\n            event,\n            input: parsedInput,\n          });\n        } catch (error) {\n          console.error(error);\n          return new UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to run middleware.\",\n            cause: error,\n          });\n        }\n\n        // Validate without Zod (for now)\n        if (\n          !Array.isArray(files) ||\n          !files.every(\n            (f) =>\n              isObject(f) &&\n              typeof f.name === \"string\" &&\n              typeof f.size === \"number\",\n          )\n        )\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Files must be an array of objects with name and size\",\n            cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(\n              files,\n            )}'`,\n          });\n\n        // FILL THE ROUTE CONFIG so the server only has one happy path\n        let parsedConfig: ReturnType<typeof parseAndExpandInputConfig>;\n        try {\n          parsedConfig = parseAndExpandInputConfig(\n            uploadable._def.routerConfig,\n          );\n        } catch (error) {\n          console.error(error);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config.\",\n            cause: error,\n          });\n        }\n\n        try {\n          const { limitHit, count, limit, type } = fileCountLimitHit(\n            files,\n            parsedConfig,\n          );\n          if (limitHit) {\n            return new UploadThingError({\n              code: \"BAD_REQUEST\",\n              message: \"File limit exceeded\",\n              cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`,\n            });\n          }\n        } catch (error) {\n          console.error(error);\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config.\",\n            cause: error,\n          });\n        }\n\n        const callbackUrl = url.origin + url.pathname;\n\n        const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n          files: files,\n\n          routeConfig: parsedConfig,\n\n          metadata,\n          callbackUrl: config?.callbackUrl ?? callbackUrl,\n          callbackSlug: slug,\n        });\n\n        // This is when we send the response back to the user's form so they can submit the files\n        const parsedResponse = await safeParseJSON<UploadThingResponse>(\n          uploadthingApiResponse,\n        );\n\n        if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n          console.error(\"[UT] unable to get presigned urls\");\n          return new UploadThingError({\n            code: \"URL_GENERATION_FAILED\",\n            message: \"Unable to get presigned urls\",\n            cause: parsedResponse,\n          });\n        }\n\n        // This is when we send the response back to the user's form so they can submit the files\n\n        if (process.env.NODE_ENV === \"development\") {\n          for (const file of parsedResponse) {\n            void conditionalDevServer({\n              fileKey: file.key,\n              apiKey: preferredOrEnvSecret,\n            });\n          }\n        }\n\n        return {\n          body: parsedResponse.map((x) => ({\n            ...x,\n            pollingUrl: generateUploadThingURL(`/api/pollUpload/${x.key}`),\n          })),\n          status: 200,\n        };\n      }\n      case \"multipart-complete\": {\n        const maybeReqBody = await safeParseJSON<\n          UTEvents[\"multipart-complete\"]\n        >(req);\n        if (maybeReqBody instanceof Error) {\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeReqBody,\n          });\n        }\n\n        const completeRes = await utFetch(\"/api/completeMultipart\", {\n          fileKey: maybeReqBody.fileKey,\n          uploadId: maybeReqBody.uploadId,\n          etags: maybeReqBody.etags,\n        });\n        if (!completeRes.ok) {\n          return new UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to complete multipart upload\",\n          });\n        }\n\n        return { status: 200 };\n      }\n      case \"failure\": {\n        const maybeReqBody = await safeParseJSON<UTEvents[\"failure\"]>(req);\n        if (maybeReqBody instanceof Error) {\n          return new UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid request body\",\n            cause: maybeReqBody,\n          });\n        }\n        const { fileKey, uploadId } = maybeReqBody;\n\n        // Tell uploadthing to mark the upload as failed\n        const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n          fileKey,\n          uploadId,\n        });\n\n        if (!uploadthingApiResponse.ok) {\n          console.error(\"[UT] failed to mark upload as failed\");\n          const parsedResponse = await safeParseJSON<UploadThingResponse>(\n            uploadthingApiResponse,\n          );\n          return new UploadThingError({\n            code: \"URL_GENERATION_FAILED\",\n            message: \"Unable to get presigned urls\",\n            cause: parsedResponse,\n          });\n        }\n\n        try {\n          // Run the onUploadError callback\n          uploadable._def.onUploadError({\n            error: new UploadThingError({\n              code: \"UPLOAD_FAILED\",\n              message: `Upload failed for ${fileKey}`,\n            }),\n            fileKey,\n          });\n        } catch (error) {\n          console.error(\n            \"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\",\n          );\n          console.error(error);\n\n          return new UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to run onUploadError callback\",\n            cause: error,\n          });\n        }\n\n        return { status: 200 };\n      }\n      default: {\n        // This should never happen\n        return new UploadThingError({\n          code: \"BAD_REQUEST\",\n          message: `Invalid action type`,\n        });\n      }\n    }\n  };\n};\n\nexport const buildPermissionsInfoHandler = <TRouter extends FileRouter>(\n  opts: RouterWithConfig<TRouter>,\n) => {\n  return () => {\n    const r = opts.router;\n\n    const permissions = Object.keys(r).map((k) => {\n      const route = r[k];\n      const config = parseAndExpandInputConfig(route._def.routerConfig);\n      return {\n        slug: k as keyof TRouter,\n        config,\n      };\n    });\n\n    return permissions;\n  };\n};\n","import {\n  generateUploadThingURL,\n  pollForFileData,\n  UploadThingError,\n} from \"@uploadthing/shared\";\nimport type { FileData } from \"@uploadthing/shared\";\n\nimport { UPLOADTHING_VERSION } from \"../constants\";\n\nconst isValidResponse = (response: Response) => {\n  if (!response.ok) return false;\n  if (response.status >= 400) return false;\n  if (!response.headers.has(\"x-uploadthing-version\")) return false;\n\n  return true;\n};\n\nexport const conditionalDevServer = async (opts: {\n  fileKey: string;\n  apiKey: string;\n}) => {\n  if (process.env.NODE_ENV !== \"development\") return;\n\n  const fileData = await pollForFileData(\n    {\n      url: generateUploadThingURL(`/api/pollUpload/${opts.fileKey}`),\n      apiKey: opts.apiKey,\n      sdkVersion: UPLOADTHING_VERSION,\n    },\n    async (json: { fileData: FileData }) => {\n      const file = json.fileData;\n\n      let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n      if (!callbackUrl.startsWith(\"http\"))\n        callbackUrl = \"http://\" + callbackUrl;\n\n      console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n\n      const response = await fetch(callbackUrl, {\n        method: \"POST\",\n        body: JSON.stringify({\n          status: \"uploaded\",\n          metadata: JSON.parse(file.metadata ?? \"{}\") as FileData[\"metadata\"],\n          file: {\n            url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n            key: opts.fileKey,\n            name: file.fileName,\n            size: file.fileSize,\n          },\n        }),\n        headers: {\n          \"uploadthing-hook\": \"callback\",\n        },\n      });\n      if (isValidResponse(response)) {\n        console.log(\n          \"[UT] Successfully simulated callback for file\",\n          opts.fileKey,\n        );\n      } else {\n        console.error(\n          \"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\",\n          opts.fileKey,\n        );\n      }\n      return file;\n    },\n  );\n\n  if (fileData !== null) return fileData;\n\n  console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);\n  throw new UploadThingError({\n    code: \"UPLOAD_FAILED\",\n    message: \"File took too long to upload\",\n  });\n};\n","import type { Json } from \"@uploadthing/shared\";\n\nimport type { MaybePromise } from \"./types\";\n\n// Don't want to use Zod cause it's an optional dependency\nexport type ParseFn<TType> = (input: unknown) => MaybePromise<TType>;\nexport type ParserZodEsque<TInput, TParsedInput extends Json> = {\n  _input: TInput;\n  _output: TParsedInput; // if using .transform etc\n  parse: ParseFn<TParsedInput>;\n};\n\n// In case we add support for more parsers later\nexport type JsonParser = ParserZodEsque<Json, Json>;\n\nexport function getParseFn<TParser extends JsonParser>(\n  parser: TParser,\n): ParseFn<TParser[\"_output\"]> {\n  if (typeof parser.parse === \"function\") {\n    return parser.parse;\n  }\n\n  throw new Error(\"Invalid parser\");\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\nimport type {\n  FileRouterInputConfig,\n  Json,\n  UploadedFile,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport type { JsonParser } from \"./parser\";\n\n//\n// Utils\nexport const unsetMarker = \"unsetMarker\" as \"unsetMarker\" & {\n  __brand: \"unsetMarker\";\n};\nexport type UnsetMarker = typeof unsetMarker;\n\nexport type Simplify<TType> = { [TKey in keyof TType]: TType[TKey] } & {};\n\nexport type MaybePromise<TType> = TType | Promise<TType>;\n\n/**\n * Omits the key without removing a potential union\n * @internal\n */\nexport type DistributiveOmit<TObj, TKey extends keyof any> = TObj extends any\n  ? Omit<TObj, TKey>\n  : never;\n\n//\n// Package\ntype ResolverOptions<TParams extends AnyParams> = {\n  metadata: Simplify<\n    TParams[\"_metadata\"] extends UnsetMarker ? undefined : TParams[\"_metadata\"]\n  >;\n\n  file: UploadedFile;\n};\n\nexport type AnyRuntime = \"app\" | \"pages\" | \"web\" | \"express\" | \"fastify\" | \"h3\";\n\nexport type MiddlewareFnArgs<TRequest, TResponse, TEvent> = {\n  req: TRequest;\n  res: TResponse;\n  event: TEvent;\n};\nexport interface AnyParams {\n  _input: any;\n  _metadata: any; // imaginary field used to bind metadata return type to an Upload resolver\n  _middlewareArgs: MiddlewareFnArgs<any, any, any>;\n  _errorShape: any;\n  _errorFn: any; // used for onUploadError\n  _output: any;\n}\n\ntype MiddlewareFn<\n  TInput extends JSON | UnsetMarker,\n  TOutput extends Record<string, unknown>,\n  TArgs extends MiddlewareFnArgs<any, any, any>,\n> = (\n  opts: TArgs & (TInput extends UnsetMarker ? {} : { input: TInput }),\n) => MaybePromise<TOutput>;\n\ntype ResolverFn<\n  TOutput extends Record<string, unknown> | void,\n  TParams extends AnyParams,\n> = (opts: ResolverOptions<TParams>) => MaybePromise<TOutput>;\n\ntype UploadErrorFn = (input: {\n  error: UploadThingError;\n  fileKey: string;\n}) => void;\n\nexport type ErrorMessage<TError extends string> = TError;\n\nexport interface UploadBuilder<TParams extends AnyParams> {\n  input: <TParser extends JsonParser>(\n    parser: TParams[\"_input\"] extends UnsetMarker\n      ? TParser\n      : ErrorMessage<\"input is already set\">,\n  ) => UploadBuilder<{\n    _input: TParser[\"_output\"];\n    _metadata: TParams[\"_metadata\"];\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: UnsetMarker;\n  }>;\n  middleware: <TOutput extends Record<string, unknown>>(\n    fn: TParams[\"_metadata\"] extends UnsetMarker\n      ? MiddlewareFn<TParams[\"_input\"], TOutput, TParams[\"_middlewareArgs\"]>\n      : ErrorMessage<\"middleware is already set\">,\n  ) => UploadBuilder<{\n    _input: TParams[\"_input\"];\n    _metadata: TOutput;\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: UnsetMarker;\n  }>;\n  onUploadComplete: <TOutput extends Record<string, unknown> | void>(\n    fn: ResolverFn<TOutput, TParams>,\n  ) => Uploader<{\n    _input: TParams[\"_input\"];\n    _metadata: TParams[\"_metadata\"];\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: TParams[\"_errorFn\"];\n    _output: TOutput;\n  }>;\n  onUploadError: (\n    fn: TParams[\"_errorFn\"] extends UnsetMarker\n      ? UploadErrorFn\n      : ErrorMessage<\"onUploadError is already set\">,\n  ) => UploadBuilder<{\n    _input: TParams[\"_input\"];\n    _metadata: TParams[\"_metadata\"];\n    _middlewareArgs: TParams[\"_middlewareArgs\"];\n    _errorShape: TParams[\"_errorShape\"];\n    _errorFn: UploadErrorFn;\n    _output: UnsetMarker;\n  }>;\n}\n\nexport type UploadBuilderDef<TParams extends AnyParams> = {\n  routerConfig: FileRouterInputConfig;\n  inputParser: JsonParser;\n  middleware: MiddlewareFn<TParams[\"_input\"], {}, TParams[\"_middlewareArgs\"]>;\n  errorFormatter: (err: UploadThingError) => TParams[\"_errorShape\"];\n  onUploadError: UploadErrorFn;\n};\n\nexport interface Uploader<TParams extends AnyParams> {\n  _def: TParams & UploadBuilderDef<TParams>;\n  resolver: ResolverFn<TParams[\"_output\"], TParams>;\n}\n\nexport type FileRouter<TParams extends AnyParams = AnyParams> = Record<\n  string,\n  Uploader<TParams>\n>;\n\nexport type inferEndpointInput<TUploader extends Uploader<any>> =\n  TUploader[\"_def\"][\"_input\"] extends UnsetMarker\n    ? undefined\n    : TUploader[\"_def\"][\"_input\"];\n\nexport type inferEndpointOutput<TUploader extends Uploader<any>> =\n  TUploader[\"_def\"][\"_output\"] extends UnsetMarker\n    ? undefined\n    : TUploader[\"_def\"][\"_output\"];\n\nexport type inferErrorShape<TRouter extends FileRouter> =\n  TRouter[keyof TRouter][\"_def\"][\"_errorShape\"];\n\nexport const VALID_ACTION_TYPES = [\n  \"upload\",\n  \"failure\",\n  \"multipart-complete\",\n] as const;\nexport type ActionType = (typeof VALID_ACTION_TYPES)[number];\n\nexport type UTEvents = {\n  upload: {\n    files: { name: string; size: number }[];\n    input: Json;\n  };\n  failure: {\n    fileKey: string;\n    uploadId: string;\n    s3Error?: string;\n    fileName: string;\n  };\n  \"multipart-complete\": {\n    fileKey: string;\n    uploadId: string;\n    etags: {\n      tag: string;\n      partNumber: number;\n    }[];\n  };\n};\n","export function incompatibleNodeGuard() {\n  if (typeof process === \"undefined\") return;\n\n  let major: number | undefined;\n  let minor: number | undefined;\n\n  const maybeNodeVersion = process.versions?.node?.split(\".\");\n  if (maybeNodeVersion) {\n    [major, minor] = maybeNodeVersion.map((v) => parseInt(v, 10));\n  }\n\n  const maybeNodePath = process.env?.NODE;\n  if (!major && maybeNodePath) {\n    const nodeVersion = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)?.[0];\n    if (nodeVersion) {\n      [major, minor] = nodeVersion\n        .substring(1)\n        .split(\".\")\n        .map((v) => parseInt(v, 10));\n    }\n  }\n\n  if (!major || !minor) return;\n\n  // Require ^18.13.0\n  if (major > 18) return;\n  if (major === 18 && minor >= 13) return;\n\n  console.error(\n    `[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`,\n  );\n  process.exit(1); // Kill the process if it isn't going to work correctly anyway\n}\n","import type {\n  FileRouterInputConfig,\n  Json,\n  UploadThingError,\n} from \"@uploadthing/shared\";\n\nimport { defaultErrorFormatter } from \"./error-formatter\";\nimport type {\n  AnyParams,\n  MiddlewareFnArgs,\n  UnsetMarker,\n  UploadBuilder,\n  UploadBuilderDef,\n  Uploader,\n} from \"./types\";\n\nfunction internalCreateBuilder<\n  TMiddlewareArgs extends MiddlewareFnArgs<any, any, any>,\n  TErrorShape extends Json = { message: string },\n>(\n  initDef: Partial<UploadBuilderDef<any>> = {},\n): UploadBuilder<{\n  _input: UnsetMarker;\n  _metadata: UnsetMarker;\n  _middlewareArgs: TMiddlewareArgs;\n  _errorShape: TErrorShape;\n  _errorFn: UnsetMarker;\n  _output: UnsetMarker;\n}> {\n  const _def: UploadBuilderDef<AnyParams> = {\n    // Default router config\n    routerConfig: {\n      image: {\n        maxFileSize: \"4MB\",\n      },\n    },\n\n    inputParser: { parse: () => ({}), _input: {}, _output: {} },\n\n    middleware: () => ({}),\n    onUploadError: () => ({}),\n\n    errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n\n    // Overload with properties passed in\n    ...initDef,\n  };\n\n  return {\n    input(userParser) {\n      return internalCreateBuilder({\n        ..._def,\n        inputParser: userParser,\n      }) as UploadBuilder<any>;\n    },\n    middleware(userMiddleware) {\n      return internalCreateBuilder({\n        ..._def,\n        middleware: userMiddleware,\n      }) as UploadBuilder<any>;\n    },\n    onUploadComplete(userUploadComplete) {\n      return {\n        _def,\n        resolver: userUploadComplete,\n      } as Uploader<any>;\n    },\n    onUploadError(userOnUploadError) {\n      return internalCreateBuilder({\n        ..._def,\n        onUploadError: userOnUploadError,\n      }) as UploadBuilder<any>;\n    },\n  };\n}\n\ntype InOut<\n  TMiddlewareArgs extends MiddlewareFnArgs<any, any, any>,\n  TErrorShape extends Json = { message: string },\n> = (input: FileRouterInputConfig) => UploadBuilder<{\n  _input: UnsetMarker;\n  _metadata: UnsetMarker;\n  _middlewareArgs: TMiddlewareArgs;\n  _errorShape: TErrorShape;\n  _errorFn: UnsetMarker;\n  _output: UnsetMarker;\n}>;\n\nexport type CreateBuilderOptions<TErrorShape extends Json> = {\n  errorFormatter: (err: UploadThingError) => TErrorShape;\n};\n\nexport function createBuilder<\n  TMiddlewareArgs extends MiddlewareFnArgs<any, any, any>,\n  TErrorShape extends Json = { message: string },\n>(\n  opts?: CreateBuilderOptions<TErrorShape>,\n): InOut<TMiddlewareArgs, TErrorShape> {\n  return (input: FileRouterInputConfig) => {\n    return internalCreateBuilder<TMiddlewareArgs, TErrorShape>({\n      routerConfig: input,\n      ...opts,\n    });\n  };\n}\n"],"mappings":"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","names":["import_shared","import_shared","res","parseAndExpandInputConfig"]}