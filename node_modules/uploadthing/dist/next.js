"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/next.ts
var next_exports = {};
__export(next_exports, {
  createNextRouteHandler: () => createNextRouteHandler,
  createUploadthing: () => createUploadthing
});
module.exports = __toCommonJS(next_exports);

// src/internal/error-formatter.ts
function defaultErrorFormatter(error) {
  return {
    message: error.message
  };
}
function formatError(error, router) {
  var _a;
  const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;
  return errorFormatter(error);
}

// src/internal/upload-builder.ts
function internalCreateBuilder(initDef = {}) {
  const _def = {
    // Default router config
    routerConfig: {
      image: {
        maxFileSize: "4MB"
      }
    },
    inputParser: { parse: () => ({}), _input: {}, _output: {} },
    middleware: () => ({}),
    onUploadError: () => ({}),
    errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,
    // Overload with properties passed in
    ...initDef
  };
  return {
    input(userParser) {
      return internalCreateBuilder({
        ..._def,
        inputParser: userParser
      });
    },
    middleware(userMiddleware) {
      return internalCreateBuilder({
        ..._def,
        middleware: userMiddleware
      });
    },
    onUploadComplete(userUploadComplete) {
      return {
        _def,
        resolver: userUploadComplete
      };
    },
    onUploadError(userOnUploadError) {
      return internalCreateBuilder({
        ..._def,
        onUploadError: userOnUploadError
      });
    }
  };
}
function createBuilder(opts) {
  return (input) => {
    return internalCreateBuilder({
      routerConfig: input,
      ...opts
    });
  };
}

// src/server.ts
var import_events = require("events");
var import_shared6 = require("@uploadthing/shared");

// package.json
var package_default = {
  name: "uploadthing",
  version: "6.0.0",
  engines: {
    node: ">=18.13.0"
  },
  license: "MIT",
  exports: {
    "./package.json": "./package.json",
    "./client": {
      types: "./dist/client.d.ts",
      import: "./dist/client.mjs",
      require: "./dist/client.js"
    },
    "./server": {
      types: "./dist/server.d.ts",
      import: "./dist/server.mjs",
      require: "./dist/server.js"
    },
    "./next": {
      types: "./dist/next.d.ts",
      import: "./dist/next.mjs",
      require: "./dist/next.js"
    },
    "./next-legacy": {
      types: "./dist/next-legacy.d.ts",
      import: "./dist/next-legacy.mjs",
      require: "./dist/next-legacy.js"
    },
    "./express": {
      import: "./dist/express.mjs",
      types: "./dist/express.d.ts",
      require: "./dist/express.js"
    },
    "./tw": {
      types: "./dist/tw.d.ts",
      import: "./dist/tw.mjs",
      require: "./dist/tw.js"
    },
    "./fastify": {
      types: "./dist/fastify.d.ts",
      import: "./dist/fastify.mjs",
      require: "./dist/fastify.js"
    },
    "./h3": {
      types: "./dist/h3.d.ts",
      import: "./dist/h3.mjs",
      require: "./dist/h3.js"
    }
  },
  files: [
    "dist"
  ],
  publishConfig: {
    access: "public"
  },
  typesVersions: {
    "*": {
      client: [
        "dist/client.d.ts"
      ],
      server: [
        "dist/server.d.ts"
      ],
      next: [
        "dist/next.d.ts"
      ],
      "next-legacy": [
        "dist/next-legacy.d.ts"
      ],
      tw: [
        "dist/tw.d.ts"
      ],
      express: [
        "dist/express.d.ts"
      ],
      fastify: [
        "dist/fastify.d.ts"
      ],
      h3: [
        "dist/h3.d.ts"
      ]
    }
  },
  scripts: {
    lint: 'eslint "**/*.{ts,tsx}" --max-warnings 0',
    build: "tsup",
    clean: "git clean -xdf dist node_modules",
    dev: "tsup --watch",
    test: "vitest run",
    "test:watch": "vitest",
    typecheck: "tsc --noEmit"
  },
  dependencies: {
    "@uploadthing/mime-types": "^0.2.2",
    "@uploadthing/shared": "^6.0.0"
  },
  devDependencies: {
    "@types/express": "^4.17.17",
    "@types/react": "18.2.33",
    "@uploadthing/eslint-config": "0.2.0",
    "@uploadthing/tsconfig": "0.1.0",
    "@uploadthing/tsup-config": "0.1.0",
    eslint: "^8.47.0",
    express: "^4.18.2",
    fastify: "^4.23.2",
    h3: "^1.8.1",
    next: "14.0.1",
    "solid-js": "^1.7.11",
    tailwindcss: "^3.3.2",
    tsup: "6.7.0",
    "type-fest": "^3.11.1",
    typescript: "^5.1.6",
    undici: "^5.20.0",
    vitest: "^0.30.1",
    zod: "^3.22.3"
  },
  eslintConfig: {
    root: true,
    extends: [
      "@uploadthing/eslint-config/base"
    ]
  }
};

// src/constants.ts
if (!package_default.version)
  throw new Error("no version found in package.json");
var UPLOADTHING_VERSION = package_default.version;

// src/internal/handler.ts
var import_shared2 = require("@uploadthing/shared");

// src/internal/dev-hook.ts
var import_shared = require("@uploadthing/shared");
var isValidResponse = (response) => {
  if (!response.ok)
    return false;
  if (response.status >= 400)
    return false;
  if (!response.headers.has("x-uploadthing-version"))
    return false;
  return true;
};
var conditionalDevServer = async (opts) => {
  if (process.env.NODE_ENV !== "development")
    return;
  const fileData = await (0, import_shared.pollForFileData)(
    {
      url: (0, import_shared.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),
      apiKey: opts.apiKey,
      sdkVersion: UPLOADTHING_VERSION
    },
    async (json) => {
      const file = json.fileData;
      let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;
      if (!callbackUrl.startsWith("http"))
        callbackUrl = "http://" + callbackUrl;
      console.log("[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK", callbackUrl);
      const response = await fetch(callbackUrl, {
        method: "POST",
        body: JSON.stringify({
          status: "uploaded",
          metadata: JSON.parse(file.metadata ?? "{}"),
          file: {
            url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,
            key: opts.fileKey,
            name: file.fileName,
            size: file.fileSize
          }
        }),
        headers: {
          "uploadthing-hook": "callback"
        }
      });
      if (isValidResponse(response)) {
        console.log(
          "[UT] Successfully simulated callback for file",
          opts.fileKey
        );
      } else {
        console.error(
          "[UT] Failed to simulate callback for file. Is your webhook configured correctly?",
          opts.fileKey
        );
      }
      return file;
    }
  );
  if (fileData !== null)
    return fileData;
  console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);
  throw new import_shared.UploadThingError({
    code: "UPLOAD_FAILED",
    message: "File took too long to upload"
  });
};

// src/internal/parser.ts
function getParseFn(parser) {
  if (typeof parser.parse === "function") {
    return parser.parse;
  }
  throw new Error("Invalid parser");
}

// src/internal/types.ts
var VALID_ACTION_TYPES = [
  "upload",
  "failure",
  "multipart-complete"
];

// src/internal/handler.ts
var createUTFetch = (apiKey) => {
  return async (endpoint, payload) => {
    const response = await fetch((0, import_shared2.generateUploadThingURL)(endpoint), {
      method: "POST",
      body: JSON.stringify(payload),
      headers: {
        "Content-Type": "application/json",
        "x-uploadthing-api-key": apiKey,
        "x-uploadthing-version": UPLOADTHING_VERSION
      }
    });
    return response;
  };
};
var fileCountLimitHit = (files, routeConfig) => {
  var _a;
  const counts = {};
  files.forEach((file) => {
    const type = (0, import_shared2.getTypeFromFileName)(file.name, (0, import_shared2.objectKeys)(routeConfig));
    if (!counts[type]) {
      counts[type] = 1;
    } else {
      counts[type] += 1;
    }
  });
  for (const _key in counts) {
    const key = _key;
    const count = counts[key];
    const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;
    if (!limit) {
      console.error(routeConfig, key);
      throw new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "Invalid config during file count",
        cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`
      });
    }
    if (count > limit) {
      return { limitHit: true, type: key, limit, count };
    }
  }
  return { limitHit: false };
};
var getHeader = (req, key) => {
  if (req.headers instanceof Headers) {
    return req.headers.get(key);
  }
  return req.headers[key];
};
var buildRequestHandler = (opts, ee) => {
  return async (input) => {
    var _a;
    if (process.env.NODE_ENV === "development") {
      console.log("[UT] UploadThing dev server is now running!");
    }
    const { req, res, event } = input;
    const { router, config } = opts;
    const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;
    let url;
    try {
      url = new URL(input.url ?? req.url ?? "");
    } catch (error) {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: `Invalid url '${((_a = input.url) == null ? void 0 : _a.href) ?? req.url}'`,
        cause: error
      });
    }
    const params = url.searchParams;
    const uploadthingHook = getHeader(req, "uploadthing-hook") ?? void 0;
    const slug = params.get("slug") ?? void 0;
    const actionType = params.get("actionType") ?? void 0;
    if (!slug)
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "No slug provided"
      });
    if (slug && typeof slug !== "string") {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "`slug` must be a string",
        cause: `Expected slug to be of type 'string', got '${typeof slug}'`
      });
    }
    if (actionType && typeof actionType !== "string") {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "`actionType` must be a string",
        cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`
      });
    }
    if (uploadthingHook && typeof uploadthingHook !== "string") {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: "`uploadthingHook` must be a string",
        cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`
      });
    }
    if (!preferredOrEnvSecret) {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,
        cause: "No secret provided"
      });
    }
    const uploadable = router[slug];
    if (!uploadable) {
      return new import_shared2.UploadThingError({
        code: "NOT_FOUND",
        message: `No file route found for slug ${slug}`
      });
    }
    if (uploadthingHook === "callback") {
      const maybeReqBody = await (0, import_shared2.safeParseJSON)(req);
      if (maybeReqBody instanceof Error) {
        return new import_shared2.UploadThingError({
          code: "BAD_REQUEST",
          message: "Invalid request body",
          cause: maybeReqBody
        });
      }
      const res2 = await uploadable.resolver({
        file: maybeReqBody.file,
        metadata: maybeReqBody.metadata
      });
      ee == null ? void 0 : ee.emit("callbackDone", res2);
      return { status: 200 };
    }
    if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {
      return new import_shared2.UploadThingError({
        code: "BAD_REQUEST",
        cause: `Invalid action type ${actionType}`,
        message: `Expected ${VALID_ACTION_TYPES.map((x) => `"${x}"`).join(", ").replace(/,(?!.*,)/, " or")} but got "${"a"}"`
      });
    }
    const utFetch = createUTFetch(preferredOrEnvSecret);
    switch (actionType) {
      case "upload": {
        const maybeInput = await (0, import_shared2.safeParseJSON)(req);
        if (maybeInput instanceof Error) {
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid request body",
            cause: maybeInput
          });
        }
        const { files, input: userInput } = maybeInput;
        let parsedInput = {};
        try {
          const inputParser = uploadable._def.inputParser;
          parsedInput = await getParseFn(inputParser)(userInput);
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid input.",
            cause: error
          });
        }
        let metadata = {};
        try {
          metadata = await uploadable._def.middleware({
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            req,
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            res,
            event,
            input: parsedInput
          });
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to run middleware.",
            cause: error
          });
        }
        if (!Array.isArray(files) || !files.every(
          (f) => (0, import_shared2.isObject)(f) && typeof f.name === "string" && typeof f.size === "number"
        ))
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Files must be an array of objects with name and size",
            cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(
              files
            )}'`
          });
        let parsedConfig;
        try {
          parsedConfig = (0, import_shared2.fillInputRouteConfig)(
            uploadable._def.routerConfig
          );
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid config.",
            cause: error
          });
        }
        try {
          const { limitHit, count, limit, type } = fileCountLimitHit(
            files,
            parsedConfig
          );
          if (limitHit) {
            return new import_shared2.UploadThingError({
              code: "BAD_REQUEST",
              message: "File limit exceeded",
              cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`
            });
          }
        } catch (error) {
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid config.",
            cause: error
          });
        }
        const callbackUrl = url.origin + url.pathname;
        const uploadthingApiResponse = await utFetch("/api/prepareUpload", {
          files,
          routeConfig: parsedConfig,
          metadata,
          callbackUrl: (config == null ? void 0 : config.callbackUrl) ?? callbackUrl,
          callbackSlug: slug
        });
        const parsedResponse = await (0, import_shared2.safeParseJSON)(
          uploadthingApiResponse
        );
        if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {
          console.error("[UT] unable to get presigned urls");
          return new import_shared2.UploadThingError({
            code: "URL_GENERATION_FAILED",
            message: "Unable to get presigned urls",
            cause: parsedResponse
          });
        }
        if (process.env.NODE_ENV === "development") {
          for (const file of parsedResponse) {
            void conditionalDevServer({
              fileKey: file.key,
              apiKey: preferredOrEnvSecret
            });
          }
        }
        return {
          body: parsedResponse.map((x) => ({
            ...x,
            pollingUrl: (0, import_shared2.generateUploadThingURL)(`/api/pollUpload/${x.key}`)
          })),
          status: 200
        };
      }
      case "multipart-complete": {
        const maybeReqBody = await (0, import_shared2.safeParseJSON)(req);
        if (maybeReqBody instanceof Error) {
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid request body",
            cause: maybeReqBody
          });
        }
        const completeRes = await utFetch("/api/completeMultipart", {
          fileKey: maybeReqBody.fileKey,
          uploadId: maybeReqBody.uploadId,
          etags: maybeReqBody.etags
        });
        if (!completeRes.ok) {
          return new import_shared2.UploadThingError({
            code: "UPLOAD_FAILED",
            message: "Failed to complete multipart upload"
          });
        }
        return { status: 200 };
      }
      case "failure": {
        const maybeReqBody = await (0, import_shared2.safeParseJSON)(req);
        if (maybeReqBody instanceof Error) {
          return new import_shared2.UploadThingError({
            code: "BAD_REQUEST",
            message: "Invalid request body",
            cause: maybeReqBody
          });
        }
        const { fileKey, uploadId } = maybeReqBody;
        const uploadthingApiResponse = await utFetch("/api/failureCallback", {
          fileKey,
          uploadId
        });
        if (!uploadthingApiResponse.ok) {
          console.error("[UT] failed to mark upload as failed");
          const parsedResponse = await (0, import_shared2.safeParseJSON)(
            uploadthingApiResponse
          );
          return new import_shared2.UploadThingError({
            code: "URL_GENERATION_FAILED",
            message: "Unable to get presigned urls",
            cause: parsedResponse
          });
        }
        try {
          uploadable._def.onUploadError({
            error: new import_shared2.UploadThingError({
              code: "UPLOAD_FAILED",
              message: `Upload failed for ${fileKey}`
            }),
            fileKey
          });
        } catch (error) {
          console.error(
            "[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback."
          );
          console.error(error);
          return new import_shared2.UploadThingError({
            code: "INTERNAL_SERVER_ERROR",
            message: "Failed to run onUploadError callback",
            cause: error
          });
        }
        return { status: 200 };
      }
      default: {
        return new import_shared2.UploadThingError({
          code: "BAD_REQUEST",
          message: `Invalid action type`
        });
      }
    }
  };
};
var buildPermissionsInfoHandler = (opts) => {
  return () => {
    const r = opts.router;
    const permissions = Object.keys(r).map((k) => {
      const route = r[k];
      const config = (0, import_shared2.fillInputRouteConfig)(route._def.routerConfig);
      return {
        slug: k,
        config
      };
    });
    return permissions;
  };
};

// src/internal/incompat-node-guard.ts
function incompatibleNodeGuard() {
  var _a, _b, _c, _d;
  if (typeof process === "undefined")
    return;
  let major;
  let minor;
  const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(".");
  if (maybeNodeVersion) {
    [major, minor] = maybeNodeVersion.map((v) => parseInt(v, 10));
  }
  const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;
  if (!major && maybeNodePath) {
    const nodeVersion = (_d = /v(\d+)\.(\d+)\.(\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];
    if (nodeVersion) {
      [major, minor] = nodeVersion.substring(1).split(".").map((v) => parseInt(v, 10));
    }
  }
  if (!major || !minor)
    return;
  if (major > 18)
    return;
  if (major === 18 && minor >= 13)
    return;
  console.error(
    `[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`
  );
  process.exit(1);
}

// src/sdk/index.ts
var import_shared5 = require("@uploadthing/shared");

// src/sdk/utils.ts
var import_shared4 = require("@uploadthing/shared");

// src/internal/multi-part.ts
var import_shared3 = require("@uploadthing/shared");

// src/server.ts
var createServerHandler = (opts) => {
  incompatibleNodeGuard();
  const ee = new import_events.EventEmitter();
  const requestHandler = buildRequestHandler(opts, ee);
  const POST = async (request) => {
    const req = request instanceof Request ? request : request.request;
    const response = await requestHandler({ req });
    if (response instanceof import_shared6.UploadThingError) {
      return new Response(JSON.stringify(formatError(response, opts.router)), {
        status: (0, import_shared6.getStatusCodeFromError)(response),
        headers: {
          "x-uploadthing-version": UPLOADTHING_VERSION
        }
      });
    }
    if (response.status !== 200) {
      return new Response("An unknown error occured", {
        status: 500,
        headers: {
          "x-uploadthing-version": UPLOADTHING_VERSION
        }
      });
    }
    return new Response(JSON.stringify(response.body), {
      status: response.status,
      headers: {
        "x-uploadthing-version": UPLOADTHING_VERSION
      }
    });
  };
  const getBuildPerms = buildPermissionsInfoHandler(opts);
  const GET = async (request) => {
    const req = request instanceof Request ? request : request.request;
    const clientPollingKey = req.headers.get("x-uploadthing-polling-key");
    if (clientPollingKey) {
      const eventData = await new Promise((resolve) => {
        ee.addListener("callbackDone", resolve);
      });
      ee.removeAllListeners("callbackDone");
      return new Response(JSON.stringify(eventData), {
        status: 200,
        headers: {
          "x-uploadthing-version": UPLOADTHING_VERSION
        }
      });
    }
    return new Response(JSON.stringify(getBuildPerms()), {
      status: 200,
      headers: {
        "x-uploadthing-version": UPLOADTHING_VERSION
      }
    });
  };
  return { GET, POST };
};

// src/next.ts
var createUploadthing = (opts) => createBuilder(opts);
var createNextRouteHandler = (opts) => {
  const handlers = createServerHandler(opts);
  return {
    POST: (req) => handlers.POST(req),
    GET: (req) => handlers.GET(req)
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createNextRouteHandler,
  createUploadthing
});
//# sourceMappingURL=next.js.map