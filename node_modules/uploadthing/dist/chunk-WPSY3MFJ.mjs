// src/internal/incompat-node-guard.ts
function incompatibleNodeGuard() {
  var _a, _b, _c, _d;
  if (typeof process === "undefined")
    return;
  let major;
  let minor;
  const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(".");
  if (maybeNodeVersion) {
    [major, minor] = maybeNodeVersion.map((v) => parseInt(v, 10));
  }
  const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;
  if (!major && maybeNodePath) {
    const nodeVersion = (_d = /v(\d+)\.(\d+)\.(\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];
    if (nodeVersion) {
      [major, minor] = nodeVersion.substring(1).split(".").map((v) => parseInt(v, 10));
    }
  }
  if (!major || !minor)
    return;
  if (major > 18)
    return;
  if (major === 18 && minor >= 13)
    return;
  console.error(
    `[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`
  );
  process.exit(1);
}

export {
  incompatibleNodeGuard
};
//# sourceMappingURL=chunk-WPSY3MFJ.mjs.map