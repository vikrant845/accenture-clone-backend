import { UploadThingError } from "@uploadthing/shared";
import type { DistributiveOmit, FileRouter, inferEndpointInput, inferEndpointOutput } from "./internal/types";
/**
 * @internal
 * Shared helpers for our premade components that's reusable by multiple frameworks
 */
export * from "./internal/component-theming";
type UploadFilesOptions<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = {
    onUploadProgress?: ({ file, progress, }: {
        file: string;
        progress: number;
    }) => void;
    onUploadBegin?: ({ file }: {
        file: string;
    }) => void;
    files: File[];
    /**
     * URL to the UploadThing API endpoint
     * @example URL { http://localhost:3000/api/uploadthing }
     * @example URL { https://www.example.com/api/uploadthing }
     */
    url: URL;
} & (undefined extends inferEndpointInput<TRouter[TEndpoint]> ? {} : {
    input: inferEndpointInput<TRouter[TEndpoint]>;
});
export declare const INTERNAL_DO_NOT_USE__fatalClientError: (e: Error) => UploadThingError<{
    message: string;
}>;
export type UploadFileResponse<TServerOutput> = {
    name: string;
    size: number;
    key: string;
    url: string;
    serverData: TServerOutput;
};
export declare const DANGEROUS__uploadFiles: <TRouter extends FileRouter, TEndpoint extends keyof TRouter>(endpoint: TEndpoint, opts: UploadFilesOptions<TRouter, TEndpoint>) => Promise<{
    name: string;
    size: number;
    key: string;
    serverData: Awaited<inferEndpointOutput<TRouter[TEndpoint]>>;
    url: string;
}[]>;
export declare const genUploader: <TRouter extends FileRouter>(initOpts: {
    /**
     * URL to the UploadThing API endpoint
     * @example URL { /api/uploadthing }
     * @example URL { https://www.example.com/api/uploadthing }
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL | undefined;
}) => <TEndpoint extends keyof TRouter>(endpoint: TEndpoint, opts: DistributiveOmit<UploadFilesOptions<TRouter, TEndpoint>, "url">) => Promise<{
    name: string;
    size: number;
    key: string;
    serverData: Awaited<inferEndpointOutput<TRouter[TEndpoint]>>;
    url: string;
}[]>;
export declare const classNames: (...classes: (string | boolean)[]) => string;
export declare const generateMimeTypes: (fileTypes: string[]) => string[] | undefined;
export declare const generateClientDropzoneAccept: (fileTypes: string[]) => {
    [k: string]: never[];
} | undefined;
export declare function getFullApiUrl(maybeUrl?: string): URL;
//# sourceMappingURL=client.d.ts.map