import type { ContentDisposition, FetchEsque, Json, MaybeUrl } from "@uploadthing/shared";
import type { FileEsque, UploadFileResponse } from "./utils";
export interface UTApiOptions {
    /**
     * Provide a custom fetch function.
     * @default globalThis.fetch
     */
    fetch?: FetchEsque;
    /**
     * Provide a custom UploadThing API key.
     * @default process.env.UPLOADTHING_SECRET
     */
    apiKey?: string;
}
export declare class UTApi {
    private fetch;
    private apiKey;
    private defaultHeaders;
    constructor(opts?: UTApiOptions);
    private requestUploadThing;
    /**
     * @param {FileEsque | FileEsque[]} files The file(s) to upload
     * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)
     *
     * @example
     * await uploadFiles(new File(["foo"], "foo.txt"));
     *
     * @example
     * await uploadFiles([
     *   new File(["foo"], "foo.txt"),
     *   new File(["bar"], "bar.txt"),
     * ]);
     */
    uploadFiles<T extends FileEsque | FileEsque[]>(files: T, opts?: {
        metadata?: Json;
        contentDisposition?: ContentDisposition;
    }): Promise<T extends FileEsque[] ? UploadFileResponse[] : UploadFileResponse>;
    /**
     * @param {string} url The URL of the file to upload
     * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)
     *
     * @example
     * await uploadFileFromUrl("https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
     *
     * @example
     * await uploadFileFromUrl([
     *   "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg",
     *   "https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"
     * ])
     */
    uploadFilesFromUrl<T extends MaybeUrl | MaybeUrl[]>(urls: T, opts?: {
        metadata: Json;
        contentDisposition: ContentDisposition;
    }): Promise<T extends MaybeUrl[] ? UploadFileResponse[] : UploadFileResponse>;
    /**
     * Request to delete files from UploadThing storage.
     * @param {string | string[]} fileKeys
     *
     * @example
     * await deleteFiles("2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
     *
     * @example
     * await deleteFiles(["2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg","1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"])
     */
    deleteFiles(fileKeys: string[] | string): Promise<{
        success: boolean;
    }>;
    /**
     * Request file URLs from UploadThing storage.
     * @param {string | string[]} fileKeys
     *
     * @example
     * const data = await getFileUrls("2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg");
     * console.log(data); // [{key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", url: "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg"}]
     *
     * @example
     * const data = await getFileUrls(["2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg","1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"])
     * console.log(data) // [{key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", url: "https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg" },{key: "1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg", url: "https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg"}]
     */
    getFileUrls(fileKeys: string[] | string): Promise<{
        key: string;
        url: string;
    }[]>;
    /**
     * Request file list from UploadThing storage.
     *
     * @example
     * const data = await listFiles();
     * console.log(data); // { key: "2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg", id: "2e0fdb64-9957-4262-8e45-f372ba903ac8" }
     */
    listFiles(): Promise<{
        key: string;
        id: string;
        status: "Deletion Pending" | "Failed" | "Uploaded" | "Uploading";
    }[]>;
    renameFile(updates: {
        fileKey: string;
        newName: string;
    } | {
        fileKey: string;
        newName: string;
    }[]): Promise<{
        success: true;
    }>;
    getUsageInfo(): Promise<{
        totalBytes: number;
        totalReadable: string;
        appTotalBytes: number;
        appTotalReadable: string;
        filesUploaded: number;
        limitBytes: number;
        limitReadable: string;
    }>;
}
//# sourceMappingURL=index.d.ts.map